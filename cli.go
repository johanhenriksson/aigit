package aigit

import (
	"context"
	"fmt"
	"strings"

	"github.com/spf13/cobra"
)

type Cli struct {
	model  Model
	git    Git
	github GitHub
	root   *cobra.Command
}

func NewCli(model Model, git Git, github GitHub) *Cli {
	cli := &Cli{
		model:  model,
		git:    git,
		github: github,
	}

	cli.root = &cobra.Command{
		Use:   "aigit",
		Short: "AI-enhanced git CLI",
		Long:  `A git CLI tool that uses AI to help with common git operations.`,
	}

	commitCmd := &cobra.Command{
		Use:   "commit",
		Short: "Create a commit with an AI-generated message",
		Long:  `Create a commit with a message generated by AI based on the staged changes.`,
		RunE:  cli.commit,
	}

	amendCmd := &cobra.Command{
		Use:   "amend",
		Short: "Amend the last commit with staged changes and regenerate the message",
		Long:  `Amend the last commit with staged changes and generate a new commit message using AI.`,
		RunE:  cli.amend,
	}

	prCmd := &cobra.Command{
		Use:   "pr",
		Short: "Create a pull request with an AI-generated description",
		Long:  `Create a pull request with a description generated by AI based on the commit history.`,
		RunE:  cli.createPR,
	}

	cli.root.AddCommand(commitCmd)
	cli.root.AddCommand(amendCmd)
	cli.root.AddCommand(prCmd)
	return cli
}

func (cli *Cli) Run(args []string) error {
	cli.root.SetArgs(args[1:]) // Skip the program name
	return cli.root.Execute()
}

// cleanMarkdownCodeBlocks removes markdown code block markers and AI prefixes from the text
func cleanMarkdownCodeBlocks(text string) string {
	// Remove ``` at the start and end of the text
	text = strings.TrimSpace(text)
	text = strings.TrimPrefix(text, "```")
	text = strings.TrimSuffix(text, "```")
	text = strings.TrimSpace(text)

	// Remove "AI:" prefix if present
	text = strings.TrimPrefix(text, "AI:")
	text = strings.TrimSpace(text)

	// Remove duplicate lines
	lines := strings.Split(text, "\n")
	seen := make(map[string]bool)
	var uniqueLines []string
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line != "" && !seen[line] {
			seen[line] = true
			uniqueLines = append(uniqueLines, line)
		}
	}

	return strings.Join(uniqueLines, "\n")
}

func (cli *Cli) commit(cmd *cobra.Command, args []string) error {
	// Get staged changes
	diff, err := cli.git.GetStagedDiff()
	if err != nil {
		return fmt.Errorf("error getting staged changes: %w", err)
	}

	if diff == "" {
		return fmt.Errorf("no changes staged for commit")
	}

	// Ask AI for commit message
	var message string
	err = WithSpinner("Generating commit message...", func() error {
		query := fmt.Sprintf("Please write a concise and descriptive commit message, adhering to conventional commits and in plain text, for the following changes:\n\n%s", diff)
		var err error
		message, err = cli.model.Query(context.Background(), query)
		return err
	})
	if err != nil {
		return fmt.Errorf("error getting commit message from AI: %w", err)
	}

	// Clean up the message
	message = cleanMarkdownCodeBlocks(message)

	// Execute git commit
	if err := cli.git.Commit(message); err != nil {
		return fmt.Errorf("error committing changes: %w", err)
	}

	fmt.Printf("Committed with message:\n%s\n", message)
	return nil
}

func (cli *Cli) amend(cmd *cobra.Command, args []string) error {
	// Get staged changes
	diff, err := cli.git.GetStagedDiff()
	if err != nil {
		return fmt.Errorf("error getting staged changes: %w", err)
	}

	if diff == "" {
		return fmt.Errorf("no changes staged for amend")
	}

	// Ask AI for commit message
	var message string
	err = WithSpinner("Generating commit message...", func() error {
		query := fmt.Sprintf("Please write a concise and descriptive commit message, adhering to conventional commits and in plain text, for the following changes:\n\n%s", diff)
		var err error
		message, err = cli.model.Query(context.Background(), query)
		return err
	})
	if err != nil {
		return fmt.Errorf("error getting commit message from AI: %w", err)
	}

	// Clean up the message
	message = cleanMarkdownCodeBlocks(message)

	// Execute git amend
	if err := cli.git.Amend(message); err != nil {
		return fmt.Errorf("error amending commit: %w", err)
	}

	fmt.Printf("Amended commit with message:\n%s\n", message)
	return nil
}

func (cli *Cli) createPR(cmd *cobra.Command, args []string) error {
	// Get current branch
	currentBranch, err := cli.git.GetCurrentBranch()
	if err != nil {
		return fmt.Errorf("error getting current branch: %w", err)
	}

	// Get base branch
	baseBranch, err := cli.git.GetBaseBranch()
	if err != nil {
		return fmt.Errorf("error getting base branch: %w", err)
	}

	// Get commit history
	history, err := cli.git.GetCommitHistory(baseBranch)
	if err != nil {
		return fmt.Errorf("error getting commit history: %w", err)
	}

	if history == "" {
		return fmt.Errorf("no commits found between %s and %s", baseBranch, currentBranch)
	}

	// Try to push the branch
	if err := cli.git.Push(); err != nil {
		fmt.Println("Regular push failed, attempting force push...")
		if err := cli.git.ForcePush(); err != nil {
			return fmt.Errorf("failed to push branch: %w", err)
		}
		fmt.Println("Force push successful")
	} else {
		fmt.Println("Branch pushed successfully")
	}

	// Ask AI for PR description and title
	var description, title string
	err = WithSpinner("Generating pull request description...", func() error {
		query := fmt.Sprintf("Please write a concise and descriptive pull request description for the following changes. Include a summary of the changes and any important notes for reviewers:\n\n%s", history)
		var err error
		description, err = cli.model.Query(context.Background(), query)
		if err != nil {
			return err
		}

		// Clean up the description
		description = cleanMarkdownCodeBlocks(description)

		// Ask AI to generate a clean title based on the description
		titleQuery := fmt.Sprintf("Based on this pull request description, generate a concise, descriptive title (max 72 chars) that follows conventional commits format. Return only the title, no markdown or quotes:\n\n%s", description)
		title, err = cli.model.Query(context.Background(), titleQuery)
		if err != nil {
			return err
		}

		// Clean up the title
		title = cleanMarkdownCodeBlocks(title)
		title = strings.TrimSpace(title)
		return nil
	})
	if err != nil {
		return fmt.Errorf("error getting PR content from AI: %w", err)
	}

	// Check if a PR already exists for this branch
	hasPR, err := cli.github.HasOpenPullRequest()
	if err != nil {
		return fmt.Errorf("error checking for existing pull request: %w", err)
	}

	if hasPR {
		if err := cli.github.EditPullRequest(title, description); err != nil {
			return fmt.Errorf("error updating pull request: %w", err)
		}
		fmt.Printf("Updated pull request with title:\n%s\n", title)
	} else {
		if err := cli.github.CreatePullRequest(title, description); err != nil {
			return fmt.Errorf("error creating pull request: %w", err)
		}
		fmt.Printf("Created pull request with title:\n%s\n", title)
	}
	return nil
}
