package aigit

import (
	"context"
	"fmt"

	"github.com/spf13/cobra"
)

type Cli struct {
	model Model
	git   Git
	root  *cobra.Command
}

func NewCli(model Model, git Git) *Cli {
	cli := &Cli{
		model: model,
		git:   git,
	}

	cli.root = &cobra.Command{
		Use:   "aigit",
		Short: "AI-enhanced git CLI",
		Long:  `A git CLI tool that uses AI to help with common git operations.`,
	}

	commitCmd := &cobra.Command{
		Use:   "commit",
		Short: "Create a commit with an AI-generated message",
		Long:  `Create a commit with a message generated by AI based on the staged changes.`,
		RunE:  cli.commit,
	}

	cli.root.AddCommand(commitCmd)
	return cli
}

func (cli *Cli) Run(args []string) error {
	cli.root.SetArgs(args[1:]) // Skip the program name
	return cli.root.Execute()
}

func (cli *Cli) commit(cmd *cobra.Command, args []string) error {
	// Get staged changes
	diff, err := cli.git.GetStagedDiff()
	if err != nil {
		return fmt.Errorf("error getting staged changes: %w", err)
	}

	if diff == "" {
		return fmt.Errorf("no changes staged for commit")
	}

	// Ask AI for commit message
	query := fmt.Sprintf("Please write a concise and descriptive commit message for the following changes:\n\n%s", diff)
	message, err := cli.model.Query(context.Background(), query)
	if err != nil {
		return fmt.Errorf("error getting commit message from AI: %w", err)
	}

	// Execute git commit
	if err := cli.git.Commit(message); err != nil {
		return fmt.Errorf("error committing changes: %w", err)
	}

	fmt.Printf("Committed with message:\n%s\n", message)
	return nil
}
